/**
 * This file is part of the mingw-w64 runtime package.
 * No warranty is given; refer to the file DISCLAIMER within this package.
 */
#ifndef __IPHLPAPI_H__
#define __IPHLPAPI_H__

#include <winapifamily.h>

#ifndef IPHLPAPI_DLL_LINKAGE
# ifdef DECLSPEC_IMPORT
#   define IPHLPAPI_DLL_LINKAGE DECLSPEC_IMPORT
# else
#   define IPHLPAPI_DLL_LINKAGE
# endif
#endif

#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP | WINAPI_PARTITION_SYSTEM | WINAPI_PARTITION_GAMES)

#ifdef __cplusplus
extern "C" {
#endif

#include <iprtrmib.h>
#include <ipexport.h>
#include <iptypes.h>
#include <tcpestats.h>

#endif  /* WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP | WINAPI_PARTITION_SYSTEM | WINAPI_PARTITION_GAMES) */

#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP | WINAPI_PARTITION_SYSTEM | WINAPI_PARTITION_GAMES)

  IPHLPAPI_DLL_LINKAGE DWORD WINAPI GetNumberOfInterfaces(PDWORD pdwNumIf);
  IPHLPAPI_DLL_LINKAGE DWORD WINAPI GetIfEntry(PMIB_IFROW pIfRow);
  IPHLPAPI_DLL_LINKAGE DWORD WINAPI GetIfTable(PMIB_IFTABLE pIfTable, PULONG pdwSize, WINBOOL bOrder);
  IPHLPAPI_DLL_LINKAGE DWORD WINAPI GetIpAddrTable(PMIB_IPADDRTABLE pIpAddrTable, PULONG pdwSize, WINBOOL bOrder);
  IPHLPAPI_DLL_LINKAGE ULONG WINAPI GetIpNetTable(PMIB_IPNETTABLE IpNetTable, PULONG SizePointer, WINBOOL Order);
  IPHLPAPI_DLL_LINKAGE DWORD WINAPI GetIpForwardTable(PMIB_IPFORWARDTABLE pIpForwardTable, PULONG pdwSize, WINBOOL bOrder);
  IPHLPAPI_DLL_LINKAGE DWORD WINAPI GetOwnerModuleFromTcpEntry(PMIB_TCPROW_OWNER_MODULE pTcpEntry, TCPIP_OWNER_MODULE_INFO_CLASS Class, PVOID pBuffer, PDWORD pdwSize);
  IPHLPAPI_DLL_LINKAGE DWORD WINAPI GetOwnerModuleFromUdpEntry(PMIB_UDPROW_OWNER_MODULE pUdpEntry, TCPIP_OWNER_MODULE_INFO_CLASS Class, PVOID pBuffer, PDWORD pdwSize);
  IPHLPAPI_DLL_LINKAGE ULONG WINAPI GetTcpTable2(PMIB_TCPTABLE2 TcpTable, PULONG SizePointer, WINBOOL Order);

#ifdef _WS2IPDEF_
  IPHLPAPI_DLL_LINKAGE ULONG WINAPI GetTcp6Table(PMIB_TCP6TABLE TcpTable, PULONG SizePointer, WINBOOL Order);
  IPHLPAPI_DLL_LINKAGE ULONG WINAPI GetTcp6Table2(PMIB_TCP6TABLE2 TcpTable, PULONG SizePointer, WINBOOL Order);
  IPHLPAPI_DLL_LINKAGE ULONG WINAPI GetPerTcpConnectionEStats(PMIB_TCPROW Row, TCP_ESTATS_TYPE EstatsType, PUCHAR Rw, ULONG RwVersion, ULONG RwSize, PUCHAR Ros, ULONG RosVersion, ULONG RosSize, PUCHAR Rod, ULONG RodVersion, ULONG RodSize);
  IPHLPAPI_DLL_LINKAGE ULONG WINAPI SetPerTcpConnectionEStats(PMIB_TCPROW Row, TCP_ESTATS_TYPE EstatsType, PUCHAR Rw, ULONG RwVersion, ULONG RwSize, ULONG Offset);
  IPHLPAPI_DLL_LINKAGE ULONG WINAPI GetPerTcp6ConnectionEStats(PMIB_TCP6ROW Row, TCP_ESTATS_TYPE EstatsType, PUCHAR Rw, ULONG RwVersion, ULONG RwSize, PUCHAR Ros, ULONG RosVersion, ULONG RosSize, PUCHAR Rod, ULONG RodVersion, ULONG RodSize);
  IPHLPAPI_DLL_LINKAGE ULONG WINAPI SetPerTcp6ConnectionEStats(PMIB_TCP6ROW Row, TCP_ESTATS_TYPE EstatsType, PUCHAR Rw, ULONG RwVersion, ULONG RwSize, ULONG Offset);
  IPHLPAPI_DLL_LINKAGE DWORD WINAPI GetOwnerModuleFromTcp6Entry(PMIB_TCP6ROW_OWNER_MODULE pTcpEntry, TCPIP_OWNER_MODULE_INFO_CLASS Class, PVOID pBuffer, PDWORD pdwSize);
  IPHLPAPI_DLL_LINKAGE ULONG WINAPI GetUdp6Table(PMIB_UDP6TABLE Udp6Table, PULONG SizePointer, WINBOOL Order);
  IPHLPAPI_DLL_LINKAGE DWORD WINAPI GetOwnerModuleFromUdp6Entry(PMIB_UDP6ROW_OWNER_MODULE pUdpEntry, TCPIP_OWNER_MODULE_INFO_CLASS Class, PVOID pBuffer, PDWORD pdwSize);
#endif

  /**/                 DWORD        GetOwnerModuleFromPidAndInfo(ULONG ulPid, ULONGLONG *pInfo, TCPIP_OWNER_MODULE_INFO_CLASS Class, PVOID pBuffer, PDWORD pdwSize);
  IPHLPAPI_DLL_LINKAGE ULONG WINAPI GetIpStatistics(PMIB_IPSTATS Statistics);
  IPHLPAPI_DLL_LINKAGE ULONG WINAPI GetTcpStatistics(PMIB_TCPSTATS Statistics);
  IPHLPAPI_DLL_LINKAGE ULONG WINAPI GetUdpStatistics(PMIB_UDPSTATS Stats);
  IPHLPAPI_DLL_LINKAGE ULONG WINAPI SetIpStatisticsEx(PMIB_IPSTATS Statistics, ULONG Family);
  IPHLPAPI_DLL_LINKAGE DWORD WINAPI SetIfEntry(PMIB_IFROW pIfRow);
  IPHLPAPI_DLL_LINKAGE DWORD WINAPI CreateIpForwardEntry(PMIB_IPFORWARDROW pRoute);
  IPHLPAPI_DLL_LINKAGE DWORD WINAPI SetIpForwardEntry(PMIB_IPFORWARDROW pRoute);
  IPHLPAPI_DLL_LINKAGE DWORD WINAPI DeleteIpForwardEntry(PMIB_IPFORWARDROW pRoute);
  IPHLPAPI_DLL_LINKAGE DWORD WINAPI SetIpStatistics(PMIB_IPSTATS pIpStats);
  IPHLPAPI_DLL_LINKAGE DWORD WINAPI SetIpTTL(UINT nTTL);
  IPHLPAPI_DLL_LINKAGE DWORD WINAPI CreateIpNetEntry(PMIB_IPNETROW pArpEntry);
  IPHLPAPI_DLL_LINKAGE DWORD WINAPI SetIpNetEntry(PMIB_IPNETROW pArpEntry);
  IPHLPAPI_DLL_LINKAGE DWORD WINAPI DeleteIpNetEntry(PMIB_IPNETROW pArpEntry);
  IPHLPAPI_DLL_LINKAGE DWORD WINAPI FlushIpNetTable(DWORD dwIfIndex);
  IPHLPAPI_DLL_LINKAGE DWORD WINAPI CreateProxyArpEntry(DWORD dwAddress, DWORD dwMask, DWORD dwIfIndex);
  IPHLPAPI_DLL_LINKAGE DWORD WINAPI DeleteProxyArpEntry(DWORD dwAddress, DWORD dwMask, DWORD dwIfIndex);
  IPHLPAPI_DLL_LINKAGE DWORD WINAPI SetTcpEntry(PMIB_TCPROW pTcpRow);
  IPHLPAPI_DLL_LINKAGE DWORD WINAPI GetInterfaceInfo(PIP_INTERFACE_INFO pIfTable, PULONG dwOutBufLen);
  IPHLPAPI_DLL_LINKAGE DWORD WINAPI GetUniDirectionalAdapterInfo(PIP_UNIDIRECTIONAL_ADAPTER_ADDRESS pIPIfInfo, PULONG dwOutBufLen);

#ifndef NHPALLOCATEANDGETINTERFACEINFOFROMSTACK_DEFINED
# define NHPALLOCATEANDGETINTERFACEINFOFROMSTACK_DEFINED
  IPHLPAPI_DLL_LINKAGE DWORD WINAPI NhpAllocateAndGetInterfaceInfoFromStack(IP_INTERFACE_NAME_INFO **ppTable, PDWORD pdwCount, WINBOOL bOrder, HANDLE hHeap, DWORD dwFlags);
#endif

  IPHLPAPI_DLL_LINKAGE DWORD                 WINAPI GetBestInterface(IPAddr dwDestAddr, PDWORD pdwBestIfIndex);
  IPHLPAPI_DLL_LINKAGE DWORD                 WINAPI GetBestRoute(DWORD dwDestAddr, DWORD dwSourceAddr, PMIB_IPFORWARDROW pBestRoute);
  IPHLPAPI_DLL_LINKAGE DWORD                 WINAPI NotifyAddrChange(PHANDLE Handle, LPOVERLAPPED overlapped);
  IPHLPAPI_DLL_LINKAGE DWORD                 WINAPI NotifyRouteChange(PHANDLE Handle, LPOVERLAPPED overlapped);
  IPHLPAPI_DLL_LINKAGE WINBOOL               WINAPI CancelIPChangeNotify(LPOVERLAPPED notifyOverlapped);
  IPHLPAPI_DLL_LINKAGE DWORD                 WINAPI GetAdapterIndex(LPWSTR AdapterName, PULONG IfIndex);
  IPHLPAPI_DLL_LINKAGE DWORD                 WINAPI AddIPAddress(IPAddr Address, IPMask IpMask, DWORD IfIndex, PULONG NTEContext, PULONG NTEInstance);
  IPHLPAPI_DLL_LINKAGE DWORD                 WINAPI DeleteIPAddress(ULONG NTEContext);
  IPHLPAPI_DLL_LINKAGE ULONG                 WINAPI GetAdaptersInfo(PIP_ADAPTER_INFO AdapterInfo, PULONG SizePointer);
  IPHLPAPI_DLL_LINKAGE PIP_ADAPTER_ORDER_MAP WINAPI GetAdapterOrderMap(VOID);

  typedef struct _INTERFACE_HARDWARE_TIMESTAMP_CAPABILITIES
  {
    BOOLEAN PtpV2OverUdpIPv4EventMessageReceive;
    BOOLEAN PtpV2OverUdpIPv4AllMessageReceive;
    BOOLEAN PtpV2OverUdpIPv4EventMessageTransmit;
    BOOLEAN PtpV2OverUdpIPv4AllMessageTransmit;
    BOOLEAN PtpV2OverUdpIPv6EventMessageReceive;
    BOOLEAN PtpV2OverUdpIPv6AllMessageReceive;
    BOOLEAN PtpV2OverUdpIPv6EventMessageTransmit;
    BOOLEAN PtpV2OverUdpIPv6AllMessageTransmit;
    BOOLEAN AllReceive;
    BOOLEAN AllTransmit;
    BOOLEAN TaggedTransmit;
  } INTERFACE_HARDWARE_TIMESTAMP_CAPABILITIES, *PINTERFACE_HARDWARE_TIMESTAMP_CAPABILITIES;

  typedef struct _INTERFACE_SOFTWARE_TIMESTAMP_CAPABILITIES
  {
    BOOLEAN AllReceive;
    BOOLEAN AllTransmit;
    BOOLEAN TaggedTransmit;
  } INTERFACE_SOFTWARE_TIMESTAMP_CAPABILITIES, *PINTERFACE_SOFTWARE_TIMESTAMP_CAPABILITIES;

  typedef struct _INTERFACE_TIMESTAMP_CAPABILITIES
  {
    ULONG64                                   HardwareClockFrequencyHz;
    BOOLEAN                                   SupportsCrossTimestamp;
    INTERFACE_HARDWARE_TIMESTAMP_CAPABILITIES HardwareCapabilities;
    INTERFACE_SOFTWARE_TIMESTAMP_CAPABILITIES SoftwareCapabilities;
  } INTERFACE_TIMESTAMP_CAPABILITIES, *PINTERFACE_TIMESTAMP_CAPABILITIES;

  typedef struct _INTERFACE_HARDWARE_CROSSTIMESTAMP
  {
    ULONG64 SystemTimestamp1;
    ULONG64 HardwareClockTimestamp;
    ULONG64 SystemTimestamp2;
  } INTERFACE_HARDWARE_CROSSTIMESTAMP, *PINTERFACE_HARDWARE_CROSSTIMESTAMP;

  DECLARE_HANDLE(HIFTIMESTAMPCHANGE);

  IPHLPAPI_DLL_LINKAGE DWORD WINAPI GetInterfaceActiveTimestampCapabilities(CONST NET_LUID *InterfaceLuid, PINTERFACE_TIMESTAMP_CAPABILITIES TimestampCapabilites);
  IPHLPAPI_DLL_LINKAGE DWORD WINAPI GetInterfaceSupportedTimestampCapabilities(CONST NET_LUID *InterfaceLuid, PINTERFACE_TIMESTAMP_CAPABILITIES TimestampCapabilites);
  IPHLPAPI_DLL_LINKAGE DWORD WINAPI CaptureInterfaceHardwareCrossTimestamp(CONST NET_LUID *InterfaceLuid, PINTERFACE_HARDWARE_CROSSTIMESTAMP CrossTimestamp);

  typedef VOID CALLBACK INTERFACE_TIMESTAMP_CONFIG_CHANGE_CALLBACK(PVOID CallerContext);
  typedef INTERFACE_TIMESTAMP_CONFIG_CHANGE_CALLBACK *PINTERFACE_TIMESTAMP_CONFIG_CHANGE_CALLBACK;

  IPHLPAPI_DLL_LINKAGE DWORD   WINAPI RegisterInterfaceTimestampConfigChange(PINTERFACE_TIMESTAMP_CONFIG_CHANGE_CALLBACK Callback, PVOID CallerContext, HIFTIMESTAMPCHANGE *NotificationHandle);
  IPHLPAPI_DLL_LINKAGE VOID    WINAPI UnregisterInterfaceTimestampConfigChange(HIFTIMESTAMPCHANGE NotificationHandle);
  IPHLPAPI_DLL_LINKAGE DWORD   WINAPI GetInterfaceCurrentTimestampCapabilities(CONST NET_LUID *InterfaceLuid, PINTERFACE_TIMESTAMP_CAPABILITIES TimestampCapabilites);
  IPHLPAPI_DLL_LINKAGE DWORD   WINAPI GetInterfaceHardwareTimestampCapabilities(CONST NET_LUID *InterfaceLuid, PINTERFACE_TIMESTAMP_CAPABILITIES TimestampCapabilites);
  IPHLPAPI_DLL_LINKAGE DWORD   WINAPI NotifyIfTimestampConfigChange(PVOID CallerContext, PINTERFACE_TIMESTAMP_CONFIG_CHANGE_CALLBACK Callback, HIFTIMESTAMPCHANGE *NotificationHandle);
  IPHLPAPI_DLL_LINKAGE VOID    WINAPI CancelIfTimestampConfigChange(HIFTIMESTAMPCHANGE NotificationHandle);
  IPHLPAPI_DLL_LINKAGE DWORD   WINAPI IpReleaseAddress(PIP_ADAPTER_INDEX_MAP AdapterInfo);
  IPHLPAPI_DLL_LINKAGE DWORD   WINAPI IpRenewAddress(PIP_ADAPTER_INDEX_MAP AdapterInfo);
  IPHLPAPI_DLL_LINKAGE DWORD   WINAPI SendARP(IPAddr DestIP, IPAddr SrcIP, PVOID pMacAddr, PULONG PhyAddrLen);
  IPHLPAPI_DLL_LINKAGE WINBOOL WINAPI GetRTTAndHopCount(IPAddr DestIpAddress, PULONG HopCount, ULONG MaxHops, PULONG RTT);
  IPHLPAPI_DLL_LINKAGE DWORD   WINAPI GetFriendlyIfIndex(DWORD IfIndex);
  IPHLPAPI_DLL_LINKAGE DWORD   WINAPI EnableRouter(HANDLE *pHandle, OVERLAPPED *pOverlapped);
  IPHLPAPI_DLL_LINKAGE DWORD   WINAPI UnenableRouter(OVERLAPPED *pOverlapped, LPDWORD lpdwEnableCount);
  IPHLPAPI_DLL_LINKAGE DWORD   WINAPI DisableMediaSense(HANDLE *pHandle, OVERLAPPED *pOverLapped);
  IPHLPAPI_DLL_LINKAGE DWORD   WINAPI RestoreMediaSense(OVERLAPPED *pOverlapped, LPDWORD lpdwEnableCount);
  IPHLPAPI_DLL_LINKAGE DWORD   WINAPI GetIpErrorString(IP_STATUS ErrorCode, PWSTR Buffer, PDWORD Size);
#ifdef _WS2DEF_
  IPHLPAPI_DLL_LINKAGE ULONG   WINAPI ResolveNeighbor(SOCKADDR *NetworkAddress, PVOID PhysicalAddress, PULONG PhysicalAddressLength);
#endif
  IPHLPAPI_DLL_LINKAGE ULONG   WINAPI CreatePersistentTcpPortReservation(USHORT StartPort, USHORT NumberOfPorts, PULONG64 Token);
  IPHLPAPI_DLL_LINKAGE ULONG   WINAPI CreatePersistentUdpPortReservation(USHORT StartPort, USHORT NumberOfPorts, PULONG64 Token);
  IPHLPAPI_DLL_LINKAGE ULONG   WINAPI DeletePersistentTcpPortReservation(USHORT StartPort, USHORT NumberOfPorts);
  IPHLPAPI_DLL_LINKAGE ULONG   WINAPI DeletePersistentUdpPortReservation(USHORT StartPort, USHORT NumberOfPorts);
  IPHLPAPI_DLL_LINKAGE ULONG   WINAPI LookupPersistentTcpPortReservation(USHORT StartPort, USHORT NumberOfPorts, PULONG64 Token);
  IPHLPAPI_DLL_LINKAGE ULONG   WINAPI LookupPersistentUdpPortReservation(USHORT StartPort, USHORT NumberOfPorts, PULONG64 Token);

#define NET_STRING_IPV4_ADDRESS          0x00000001
#define NET_STRING_IPV4_SERVICE          0x00000002
#define NET_STRING_IPV4_NETWORK          0x00000004
#define NET_STRING_IPV6_ADDRESS          0x00000008
#define NET_STRING_IPV6_ADDRESS_NO_SCOPE 0x00000010
#define NET_STRING_IPV6_SERVICE          0x00000020
#define NET_STRING_IPV6_SERVICE_NO_SCOPE 0x00000040
#define NET_STRING_IPV6_NETWORK          0x00000080
#define NET_STRING_NAMED_ADDRESS         0x00000100
#define NET_STRING_NAMED_SERVICE         0x00000200

#define NET_STRING_IP_ADDRESS           (NET_STRING_IPV4_ADDRESS  | NET_STRING_IPV6_ADDRESS)
#define NET_STRING_IP_ADDRESS_NO_SCOPE  (NET_STRING_IPV4_ADDRESS  | NET_STRING_IPV6_ADDRESS_NO_SCOPE)
#define NET_STRING_IP_SERVICE           (NET_STRING_IPV4_SERVICE  | NET_STRING_IPV6_SERVICE)
#define NET_STRING_IP_SERVICE_NO_SCOPE  (NET_STRING_IPV4_SERVICE  | NET_STRING_IPV6_SERVICE_NO_SCOPE)
#define NET_STRING_IP_NETWORK           (NET_STRING_IPV4_NETWORK  | NET_STRING_IPV6_NETWORK)
#define NET_STRING_ANY_ADDRESS          (NET_STRING_NAMED_ADDRESS | NET_STRING_IP_ADDRESS)
#define NET_STRING_ANY_ADDRESS_NO_SCOPE (NET_STRING_NAMED_ADDRESS | NET_STRING_IP_ADDRESS_NO_SCOPE)
#define NET_STRING_ANY_SERVICE          (NET_STRING_NAMED_SERVICE | NET_STRING_IP_SERVICE)
#define NET_STRING_ANY_SERVICE_NO_SCOPE (NET_STRING_NAMED_SERVICE | NET_STRING_IP_SERVICE_NO_SCOPE)

  typedef enum NET_ADDRESS_FORMAT_
  {
    NET_ADDRESS_FORMAT_UNSPECIFIED = 0,
    NET_ADDRESS_DNS_NAME,
    NET_ADDRESS_IPV4,
    NET_ADDRESS_IPV6
  } NET_ADDRESS_FORMAT;

#if defined(_WS2DEF_) && defined(_WS2IPDEF_) && defined(_WINDNS_INCLUDED_)
  typedef struct NET_ADDRESS_INFO_
  {
    NET_ADDRESS_FORMAT Format;
    __C89_NAMELESS union
    {
      struct
      {
        WCHAR Address[DNS_MAX_NAME_BUFFER_LENGTH];
        WCHAR Port[6];
      } NamedAddress;
      SOCKADDR_IN  Ipv4Address;
      SOCKADDR_IN6 Ipv6Address;
      SOCKADDR     IpAddress;
    };
  } NET_ADDRESS_INFO, *PNET_ADDRESS_INFO;

  IPHLPAPI_DLL_LINKAGE DWORD WINAPI ParseNetworkString(CONST WCHAR *NetworkString, DWORD Types, PNET_ADDRESS_INFO AddressInfo, USHORT *PortNumber, BYTE *PrefixLength);
#endif

#include <netioapi.h>  /* ToDo: Update netioapi.h */

#endif  /* WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP | WINAPI_PARTITION_SYSTEM | WINAPI_PARTITION_GAMES) */

#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP | WINAPI_PARTITION_SYSTEM | WINAPI_PARTITION_GAMES)

  IPHLPAPI_DLL_LINKAGE ULONG WINAPI GetTcpTable(PMIB_TCPTABLE TcpTable, PULONG SizePointer, WINBOOL Order);
  IPHLPAPI_DLL_LINKAGE DWORD WINAPI GetExtendedTcpTable(PVOID pTcpTable, PDWORD pdwSize, WINBOOL bOrder, ULONG ulAf, TCP_TABLE_CLASS TableClass, ULONG Reserved);
  IPHLPAPI_DLL_LINKAGE ULONG WINAPI GetUdpTable(PMIB_UDPTABLE UdpTable, PULONG SizePointer, WINBOOL Order);
  IPHLPAPI_DLL_LINKAGE DWORD WINAPI GetExtendedUdpTable(PVOID pUdpTable, PDWORD pdwSize, WINBOOL bOrder, ULONG ulAf, UDP_TABLE_CLASS TableClass, ULONG Reserved);
  IPHLPAPI_DLL_LINKAGE ULONG WINAPI GetIcmpStatistics(PMIB_ICMP Statistics);
  IPHLPAPI_DLL_LINKAGE ULONG WINAPI GetIpStatisticsEx(PMIB_IPSTATS Statistics, ULONG Family);
  IPHLPAPI_DLL_LINKAGE ULONG WINAPI GetIcmpStatisticsEx(PMIB_ICMP_EX Statistics, ULONG Family);
  IPHLPAPI_DLL_LINKAGE ULONG WINAPI GetTcpStatisticsEx(PMIB_TCPSTATS Statistics, ULONG Family);
  IPHLPAPI_DLL_LINKAGE ULONG WINAPI GetUdpStatisticsEx(PMIB_UDPSTATS Statistics, ULONG Family);
  IPHLPAPI_DLL_LINKAGE ULONG WINAPI GetTcpStatisticsEx2(PMIB_TCPSTATS2 Statistics, ULONG Family);
  IPHLPAPI_DLL_LINKAGE ULONG WINAPI GetUdpStatisticsEx2(PMIB_UDPSTATS2 Statistics, ULONG Family);
  IPHLPAPI_DLL_LINKAGE DWORD WINAPI GetBestInterfaceEx(struct sockaddr *pDestAddr, PDWORD pdwBestIfIndex);
  IPHLPAPI_DLL_LINKAGE DWORD WINAPI GetNetworkParams(PFIXED_INFO pFixedInfo, PULONG pOutBufLen);

#ifdef _WINSOCK2API_
  IPHLPAPI_DLL_LINKAGE ULONG WINAPI GetAdaptersAddresses(ULONG Family, ULONG Flags, PVOID Reserved, PIP_ADAPTER_ADDRESSES AdapterAddresses, PULONG SizePointer);
#endif

  IPHLPAPI_DLL_LINKAGE DWORD WINAPI GetPerAdapterInfo(ULONG IfIndex, PIP_PER_ADAPTER_INFO pPerAdapterInfo, PULONG pOutBufLen);

#ifdef __cplusplus
}
#endif

#endif  /* WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP | WINAPI_PARTITION_SYSTEM | WINAPI_PARTITION_GAMES) */

#endif  /* __IPHLPAPI_H__ */
