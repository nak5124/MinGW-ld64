/**
 * This file is part of the mingw-w64 runtime package.
 * No warranty is given; refer to the file DISCLAIMER within this package.
 */
#ifndef _APISETLIBLOADER_
#define _APISETLIBLOADER_

#include <_mingw_unicode.h>
#include <apiset.h>
#include <apisetcconv.h>
#include <minwindef.h>
#include <minwinbase.h>

#ifdef __cplusplus
extern "C" {
#endif

#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP | WINAPI_PARTITION_SYSTEM)

#define FIND_RESOURCE_DIRECTORY_TYPES     (0x0100)
#define FIND_RESOURCE_DIRECTORY_NAMES     (0x0200)
#define FIND_RESOURCE_DIRECTORY_LANGUAGES (0x0400)

#define RESOURCE_ENUM_LN           (0x0001)
#define RESOURCE_ENUM_MUI          (0x0002)
#define RESOURCE_ENUM_MUI_SYSTEM   (0x0004)
#define RESOURCE_ENUM_VALIDATE     (0x0008)
#define RESOURCE_ENUM_MODULE_EXACT (0x0010)

#define SUPPORT_LANG_NUMBER 32

  typedef struct tagENUMUILANG
  {
    ULONG   NumOfEnumUILang;
    ULONG   SizeOfEnumUIBuffer;
    LANGID *pEnumUIBuffer;
  } ENUMUILANG, *PENUMUILANG;

#ifdef STRICT
  typedef WINBOOL (CALLBACK *ENUMRESLANGPROCA)(HMODULE hModule, LPCSTR lpType, LPCSTR lpName, WORD wLanguage, LONG_PTR lParam);
  typedef WINBOOL (CALLBACK *ENUMRESLANGPROCW)(HMODULE hModule, LPCWSTR lpType, LPCWSTR lpName, WORD wLanguage, LONG_PTR lParam);
#define ENUMRESLANGPROC __MINGW_NAME_AW(ENUMRESLANGPROC)
  typedef WINBOOL (CALLBACK *ENUMRESNAMEPROCA)(HMODULE hModule, LPCSTR lpType, LPSTR lpName, LONG_PTR lParam);
  typedef WINBOOL (CALLBACK *ENUMRESNAMEPROCW)(HMODULE hModule, LPCWSTR lpType, LPWSTR lpName, LONG_PTR lParam);
#define ENUMRESNAMEPROC __MINGW_NAME_AW(ENUMRESNAMEPROC)
  typedef WINBOOL (CALLBACK *ENUMRESTYPEPROCA)(HMODULE hModule, LPSTR lpType, LONG_PTR lParam);
  typedef WINBOOL (CALLBACK *ENUMRESTYPEPROCW)(HMODULE hModule, LPWSTR lpType, LONG_PTR lParam);
#define ENUMRESTYPEPROC __MINGW_NAME_AW(ENUMRESTYPEPROC)
#else
  typedef FARPROC ENUMRESTYPEPROCA;
  typedef FARPROC ENUMRESTYPEPROCW;
  __MINGW_TYPEDEF_AW(ENUMRESTYPEPROC)
  typedef FARPROC ENUMRESNAMEPROCA;
  typedef FARPROC ENUMRESNAMEPROCW;
  __MINGW_TYPEDEF_AW(ENUMRESNAMEPROCA)
  typedef FARPROC ENUMRESLANGPROCA;
  typedef FARPROC ENUMRESLANGPROCW;
  __MINGW_TYPEDEF_AW(ENUMRESLANGPROC)
#endif  /* STRICT */

  WINBASEAPI WINBOOL WINAPI FreeResource(HGLOBAL hResData);

  typedef PVOID DLL_DIRECTORY_COOKIE, *PDLL_DIRECTORY_COOKIE;

  WINBASEAPI DLL_DIRECTORY_COOKIE WINAPI AddDllDirectory(PCWSTR NewDirectory);
  WINBASEAPI WINBOOL              WINAPI RemoveDllDirectory(DLL_DIRECTORY_COOKIE Cookie);
  WINBASEAPI WINBOOL              WINAPI SetDefaultDllDirectories(DWORD DirectoryFlags);
  WINBASEAPI WINBOOL              WINAPI EnumResourceNamesA(HMODULE hModule, LPCSTR lpType, ENUMRESNAMEPROCA lpEnumFunc, LONG_PTR lParam);
  WINBASEAPI WINBOOL              WINAPI EnumResourceNamesW(HMODULE hModule, LPCWSTR lpType, ENUMRESNAMEPROCW lpEnumFunc, LONG_PTR lParam);
#define EnumResourceNames __MINGW_NAME_AW(EnumResourceNames)

#endif  /* WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP | WINAPI_PARTITION_SYSTEM) */

#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP | WINAPI_PARTITION_SYSTEM | WINAPI_PARTITION_GAMES)

  WINBASEAPI WINBOOL WINAPI DisableThreadLibraryCalls(HMODULE hLibModule);
  WINBASEAPI HRSRC   WINAPI FindResourceExW(HMODULE hModule, LPCWSTR lpType, LPCWSTR lpName, WORD wLanguage);
#ifdef UNICODE
# define FindResourceEx FindResourceExW
#endif
  WINBASEAPI int     WINAPI FindStringOrdinal(DWORD dwFindStringOrdinalFlags, LPCWSTR lpStringSource, int cchSource, LPCWSTR lpStringValue, int cchValue, WINBOOL bIgnoreCase);
  WINBASEAPI WINBOOL WINAPI FreeLibrary(HMODULE hLibModule);
  WINBASEAPI VOID    WINAPI FreeLibraryAndExitThread(HMODULE hLibModule, DWORD dwExitCode) DECLSPEC_NORETURN;
  WINBASEAPI DWORD   WINAPI GetModuleFileNameA(HMODULE hModule, LPSTR lpFilename, DWORD nSize);
  WINBASEAPI DWORD   WINAPI GetModuleFileNameW(HMODULE hModule, LPWSTR lpFilename, DWORD nSize);
#define GetModuleFileName __MINGW_NAME_AW(GetModuleFileName)
  WINBASEAPI HMODULE WINAPI GetModuleHandleA(LPCSTR lpModuleName);
  WINBASEAPI HMODULE WINAPI GetModuleHandleW(LPCWSTR lpModuleName);
#define GetModuleHandle __MINGW_NAME_AW(GetModuleHandle)

#ifndef RC_INVOKED

#define GET_MODULE_HANDLE_EX_FLAG_PIN                (0x00000001)
#define GET_MODULE_HANDLE_EX_FLAG_UNCHANGED_REFCOUNT (0x00000002)
#define GET_MODULE_HANDLE_EX_FLAG_FROM_ADDRESS       (0x00000004)

  typedef WINBOOL (WINAPI *PGET_MODULE_HANDLE_EXA)(DWORD dwFlags, LPCSTR lpModuleName, HMODULE *phModule);
  typedef WINBOOL (WINAPI *PGET_MODULE_HANDLE_EXW)(DWORD dwFlags, LPCWSTR lpModuleName, HMODULE *phModule);
#define PGET_MODULE_HANDLE_EX __MINGW_NAME_AW(PGET_MODULE_HANDLE_EX)

  WINBASEAPI WINBOOL WINAPI GetModuleHandleExA(DWORD dwFlags, LPCSTR lpModuleName, HMODULE *phModule);
  WINBASEAPI WINBOOL WINAPI GetModuleHandleExW(DWORD dwFlags, LPCWSTR lpModuleName, HMODULE *phModule);
#define GetModuleHandleEx __MINGW_NAME_AW(GetModuleHandleEx)

#endif  /* RC_INVOKED */

  WINBASEAPI FARPROC WINAPI GetProcAddress(HMODULE hModule, LPCSTR lpProcName);

#define CURRENT_IMPORT_REDIRECTION_VERSION 1

  typedef struct _REDIRECTION_FUNCTION_DESCRIPTOR
  {
    PCSTR DllName;
    PCSTR FunctionName;
    PVOID RedirectionTarget;
  } REDIRECTION_FUNCTION_DESCRIPTOR, *PREDIRECTION_FUNCTION_DESCRIPTOR;

  typedef const REDIRECTION_FUNCTION_DESCRIPTOR *PCREDIRECTION_FUNCTION_DESCRIPTOR;

  typedef struct _REDIRECTION_DESCRIPTOR
  {
    ULONG                             Version;
    ULONG                             FunctionCount;
    PCREDIRECTION_FUNCTION_DESCRIPTOR Redirections;
  } REDIRECTION_DESCRIPTOR, *PREDIRECTION_DESCRIPTOR;

  typedef const REDIRECTION_DESCRIPTOR *PCREDIRECTION_DESCRIPTOR;

  WINBASEAPI HMODULE WINAPI LoadLibraryExA(LPCSTR lpLibFileName, HANDLE hFile, DWORD dwFlags);
  WINBASEAPI HMODULE WINAPI LoadLibraryExW(LPCWSTR lpLibFileName, HANDLE hFile, DWORD dwFlags);
#define LoadLibraryEx __MINGW_NAME_AW(LoadLibraryEx)

#define DONT_RESOLVE_DLL_REFERENCES               0x00000001
#define LOAD_LIBRARY_AS_DATAFILE                  0x00000002
#define LOAD_WITH_ALTERED_SEARCH_PATH             0x00000008
#define LOAD_IGNORE_CODE_AUTHZ_LEVEL              0x00000010
#define LOAD_LIBRARY_AS_IMAGE_RESOURCE            0x00000020
#define LOAD_LIBRARY_AS_DATAFILE_EXCLUSIVE        0x00000040
#define LOAD_LIBRARY_REQUIRE_SIGNED_TARGET        0x00000080
#define LOAD_LIBRARY_SEARCH_DLL_LOAD_DIR          0x00000100
#define LOAD_LIBRARY_SEARCH_APPLICATION_DIR       0x00000200
#define LOAD_LIBRARY_SEARCH_USER_DIRS             0x00000400
#define LOAD_LIBRARY_SEARCH_SYSTEM32              0x00000800
#define LOAD_LIBRARY_SEARCH_DEFAULT_DIRS          0x00001000
#define LOAD_LIBRARY_SAFE_CURRENT_DIRS            0x00002000
#define LOAD_LIBRARY_SEARCH_SYSTEM32_NO_FORWARDER 0x00004000
#define LOAD_LIBRARY_OS_INTEGRITY_CONTINUITY      0x00008000

  WINBASEAPI HGLOBAL WINAPI LoadResource(HMODULE hModule, HRSRC hResInfo);
  WINUSERAPI int     WINAPI LoadStringA(HINSTANCE hInstance, UINT uID, LPSTR lpBuffer, int cchBufferMax);
  WINUSERAPI int     WINAPI LoadStringW(HINSTANCE hInstance, UINT uID, LPWSTR lpBuffer, int cchBufferMax);
#define LoadString __MINGW_NAME_AW(LoadString)
  WINBASEAPI LPVOID  WINAPI LockResource(HGLOBAL hResData);
  WINBASEAPI DWORD   WINAPI SizeofResource(HMODULE hModule, HRSRC hResInfo);
  WINBASEAPI HRSRC   WINAPI FindResourceW(HMODULE hModule, LPCWSTR lpName, LPCWSTR lpType);
#ifdef UNICODE
# define FindResource FindResourceW
#endif
  WINBASEAPI HMODULE WINAPI LoadLibraryA(LPCSTR lpLibFileName);
  WINBASEAPI HMODULE WINAPI LoadLibraryW(LPCWSTR lpLibFileName);
#define LoadLibrary __MINGW_NAME_AW(LoadLibrary)

#endif  /* WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP | WINAPI_PARTITION_SYSTEM | WINAPI_PARTITION_GAMES) */

#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP | WINAPI_PARTITION_SYSTEM)

  WINBASEAPI WINBOOL APIENTRY EnumResourceLanguagesExA(HMODULE hModule, LPCSTR lpType, LPCSTR lpName, ENUMRESLANGPROCA lpEnumFunc, LONG_PTR lParam, DWORD dwFlags, LANGID LangId);
  WINBASEAPI WINBOOL APIENTRY EnumResourceLanguagesExW(HMODULE hModule, LPCWSTR lpType, LPCWSTR lpName, ENUMRESLANGPROCW lpEnumFunc, LONG_PTR lParam, DWORD dwFlags, LANGID LangId);
#define EnumResourceLanguagesEx __MINGW_NAME_AW(EnumResourceLanguagesEx)
  WINBASEAPI WINBOOL WINAPI   EnumResourceNamesExA(HMODULE hModule, LPCSTR lpType, ENUMRESNAMEPROCA lpEnumFunc, LONG_PTR lParam, DWORD dwFlags, LANGID LangId);
  WINBASEAPI WINBOOL WINAPI   EnumResourceNamesExW(HMODULE hModule, LPCWSTR lpType, ENUMRESNAMEPROCW lpEnumFunc, LONG_PTR lParam, DWORD dwFlags, LANGID LangId);
#define EnumResourceNamesEx __MINGW_NAME_AW(EnumResourceNamesEx)
  WINBASEAPI WINBOOL WINAPI   EnumResourceTypesExA(HMODULE hModule, ENUMRESTYPEPROCA lpEnumFunc, LONG_PTR lParam, DWORD dwFlags, LANGID LangId);
  WINBASEAPI WINBOOL WINAPI   EnumResourceTypesExW(HMODULE hModule, ENUMRESTYPEPROCW lpEnumFunc, LONG_PTR lParam, DWORD dwFlags, LANGID LangId);
#define EnumResourceTypesEx __MINGW_NAME_AW(EnumResourceTypesEx)

#endif  /* WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP | WINAPI_PARTITION_SYSTEM) */

#ifdef __cplusplus
}
#endif
#endif
